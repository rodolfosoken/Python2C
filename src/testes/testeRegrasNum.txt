{ S , Comandos , Comando , Expr_star , IncExpr , IF , While , For , Func , Def , Var_star , Op , ExprComp , OpComp , ExprComp_star , Var , OpIg , VarNum , NUM , Id , Int , Float , IntId , Corpo , Elif , Else , FuncRange 
/* 0) */  S -> Comandos ;
/* 1) */  Comandos -> Comando br ;
/* 2) */  Comandos -> Comando pontovirgula Comandos ;
/* 3) */  Comandos -> Comando br Comandos ;
/* 4) */  Comando -> Expr_star ;
/* 5) */  Comando -> IncExpr ;
/* 6) */  Comando -> IF ;
/* 7) */  Comando -> While ;
/* 8) */  Comando -> For ;
/* 9) */  Comando -> Func ;
/* 10) */  Comando -> Def ;
/* 11) */  Expr_star -> Var_star ;
/* 12) */  Expr_star -> Var_star igual Expr_star ;
/* 13) */  Expr_star -> Var_star Op Expr_star ;
/* 14) */  IncExpr -> Var OpIg VarNum ;
/* 15) */  IF -> ift ExprComp doispontos Corpo Elif Else ;
/* 16) */  While -> whilet ExprComp doispontos Corpo Else ;
/* 17) */  For -> fort Id in FuncRange doispontos Corpo ;
/* 18) */  For -> fort Id in colabr Var_star colfec doispontos Corpo ;
/* 19) */  For -> fort Id in parabr Var_star parfec doispontos Corpo ;
/* 20) */  Func -> input parabr ExprComp_star parfec ;
/* 21) */  Func -> print parabr ExprComp_star parfec ;
/* 22) */  Func -> FuncRange ;
/* 23) */  Func -> Func virgula Func ;
/* 24) */  Func -> colabr Func colfec ;
/* 25) */  Func -> parabr Func parfec ;
/* 26) */  Func -> Id igual Func ;
/* 27) */  Def -> def Id parabr Var_star parfec doispontos Corpo ;
/* 28) */  Def -> def Id parabr parfec doispontos Corpo ;
/* 29) */  Var_star -> VarNum virgula Var_star ;
/* 30) */  Var_star -> colabr Var_star colfec ;
/* 31) */  Var_star -> parabr Var_star parfec ;
/* 32) */  Var_star -> VarNum ;
/* 33) */  Op -> mais ;
/* 34) */  Op -> menos ;
/* 35) */  Op -> divide ;
/* 36) */  Op -> multiplica ;
/* 37) */  Op -> OpComp ;
/* 38) */  ExprComp -> Var_star OpComp ExprComp_star ;
/* 39) */  OpComp -> menor ;
/* 40) */  OpComp -> maior ;
/* 41) */  OpComp -> igualigual ;
/* 42) */  OpComp -> maiorigual ;
/* 43) */  OpComp -> menorigual ;
/* 44) */  OpComp -> diferente ;
/* 45) */  OpComp -> and ;
/* 46) */  OpComp -> or ;
/* 47) */  OpComp -> not ;
/* 48) */  OpComp -> in ;
/* 49) */  OpComp -> is ;
/* 50) */  ExprComp_star -> Var_star OpComp ExprComp_star ;
/* 51) */  ExprComp_star -> Var_star ;
/* 52) */  Var -> Id ;
/* 53) */  OpIg -> maisigual ;
/* 54) */  OpIg -> menosigual ;
/* 55) */  OpIg -> vezesigual ;
/* 56) */  OpIg -> arrigual ;
/* 57) */  OpIg -> divideigual ;
/* 58) */  OpIg -> percigual ;
/* 59) */  OpIg -> eigual ;
/* 60) */  OpIg -> ouigual ;
/* 61) */  OpIg -> potigual ;
/* 62) */  OpIg -> menormenorigual ;
/* 63) */  OpIg -> maiormaiorigual ;
/* 64) */  OpIg -> vezesvezesigual ;
/* 65) */  OpIg -> divdivigual ;
/* 66) */  VarNum -> NUM ;
/* 67) */  VarNum -> Var ;
/* 68) */  NUM -> Int ;
/* 69) */  NUM -> Float ;
/* 70) */  Id -> letra IntId ;
/* 71) */  Id -> letra ;
/* 72) */  Int -> numero Int ;
/* 73) */  Int -> numero ;
/* 74) */  Float -> Int ponto Int ;
/* 75) */  IntId -> Int ;
/* 76) */  IntId -> Id ;
/* 77) */  Corpo -> brident Comandos ;
/* 78) */  Corpo -> Comando br ;
/* 79) */  Corpo -> Comando pontovirgula ;
/* 80) */  Elif -> elift ExprComp doispontos Corpo Elif ;
/* 81) */  Elif -> ;
/* 82) */  Else -> elset ExprComp doispontos Corpo ;
/* 83) */  Else -> ;
/* 84) */  FuncRange -> range parabr IntId parfec ;
/* 85) */  FuncRange -> range parabr IntId virgula IntId parfec ;
/* 86) */  FuncRange -> range parabr IntId virgula IntId virgula IntId parfec ;